esphome:
  name: esp32-gamma
  friendly_name: Esp32 Gamma
  includes:
    - custom-component/seeedStudio-radar.h
    - custom-component/radar.h
    - custom-component/radar.cpp

# external_components:
#   - source: github://pr#4789
#     components: [ mr24d11c10 ]
#     refresh: 0s

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable Home Assistant API
api:
  encryption:
    key: "yfXuuUCt/r8LFKiW/35gwz4anYsGU9lxooN6LBdbFV8="

ota:
  password: "b63c7555829695599a9fb898f85aa921"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # manual_ip:
  #   static_ip: 192.168.XXX.XXX
  #   subnet: 255.255.XXX.XXX
  #   gateway: 192.168.XXX.XXX

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esp32 Gamma Fallback Hotspot"
    password: "XjlsTnwUhi6h"

# Enable logging
logger:
  baud_rate: 0

uart:
  id: uartone
  tx_pin: 1
  rx_pin: 3
  baud_rate: 9600


custom_component:
  - lambda: |-
      return {new MR24D11C10Component(id(uartone))};
    components:
      - id: seeedStudioRadar

captive_portal:


mr24d11c10:

binary_sensor:
  # - platform: mr24d11c10      
      # name: Human Presence

  - platform: gpio
    pin: GPIO14
    name: "Human presense PIN"
    device_class: PRESENCE

  - platform: gpio
    pin: GPIO12
    name: "Human activity PIN"
  
  - platform: custom
    lambda: |-
      auto uart_component = static_cast<MR24D11C10Component *>(seeedStudioRadar);
      return {uart_component->target_present};
    binary_sensors:
      name: "Human presence"

sensor:
# - platform: mr24d11c10
#   body_movement:
#     name: Body Movement
  
- platform: custom
  lambda: |-
    auto uart_component = static_cast<MR24D11C10Component *>(seeedStudioRadar);
    return {uart_component->body_movement};

  sensors:
    name: "Body Movement"
    unit_of_measurement: "%"
    accuracy_decimals: 0

select:
  - platform: template
    name: "Scene Settings"
    id: scene_settings
    options:
    - "Default"
    - "Area detection"
    - "Bathroom"
    - "Living Room"
    - "Office"
    - "Hotel"
    initial_option: "Default"
    optimistic: true
    on_value:
      then:
      - lambda: |-
          auto uart_component = static_cast<MR24D11C10Component *>(seeedStudioRadar);
          uint8_t index = 0;
          if (x == "Area detection") {
            index = 1;
          } else if (x == "Bathroom") {
            index = 2;
          } else if (x == "Living Room") {
            index = 3;
          } else if (x == "Office") {
            index = 4;
          } else if (x == "Hotel") {
            index = 5;
          } else {
            index = 0;
          }
          uart_component->send_new_scene_settings(index);

    
  - platform: template
    name: "Threshold"
    id: mode
    options:
    - "1"
    - "2"
    - "3"
    - "4"
    - "5"
    - "6"
    - "7"
    - "8"
    - "9"
    - "10"
    initial_option: "7"
    optimistic: true
    on_value:
      then:
      - lambda: |-
          auto uart_component = static_cast<MR24D11C10Component *>(seeedStudioRadar);
          uint8_t index = 0;
          if (x == "1") {
            index = 1;
          } else if (x == "2") {
            index = 2;
          } else if (x == "3") {
            index = 3;
          } else if (x == "4") {
            index = 4;
          } else if (x == "5") {
            index = 5;
          } else if (x == "6") {
            index = 6;
          } else if (x == "7") {
            index = 7;
          } else if (x == "8") {
            index = 8;
          } else if (x == "9") {
            index = 9;
          } else {
            index = 10;
          }
          uart_component->send_new_threshold(i);